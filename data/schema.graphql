type Cliente {
  id: ID
  nombre: String
  apellido: String
  empresa: String
  emails: [Email]
  edad: Int
  tipo: TipoCliente
  pedidos: [Pedido]
}

type Pedido {
  producto: String
  precio: Float
}

type Email {
  email: String
}

type Producto {
  id: ID
  clave: String!
  nombre: String!
  precio: Float!
  stock: Int!
}

enum TipoCliente {
  BASICO
  PREMIUM
}

input PedidoInput {
  producto: String!
  precio: Float!
}

input EmailInput {
  email: String
}

input ClienteInput {
  id: ID
  nombre: String!
  apellido: String!
  empresa: String!
  emails: [EmailInput]
  edad: Int!
  tipo: TipoCliente!
  pedidos: [PedidoInput]
}

input ProductoInput {
  id: ID
  clave: String!
  nombre: String!
  precio: Float!
  stock: Int!
}

type Query {
  # Clientes
  getClientes(limite: Int, offset: Int): [Cliente]
  getCliente(id: ID!): Cliente
  totalClientes: String
  consulta: [Producto]
  consulta2(name: String): [Producto]
  # Productos
  getProductos(limite: Int, offset: Int): [Producto]
  getProducto(id: ID!): Producto
  totalProductos: String
}

type Mutation {
  # Clientes
  crearCliente(input: ClienteInput): Cliente
  actualizarCliente(input: ClienteInput): Cliente
  eliminarCliente(id: ID!): String

  # Productos
  crearProducto(input: ProductoInput): Producto
  actualizarProducto(input: ProductoInput): Producto
  eliminarProducto(id: ID!): String
}
